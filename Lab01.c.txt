#include <stdio.h>
#include <pthread.h>

//global
int threadNumber = 2;

int arrayLimit = 1000;
long bigArray [1000]; 

int countThread0 = 0;
int countThread1 = 0;
int countTotalArrayElements = 0;

void *doubleNumbers(void *thread_id)
{  
    long position = (long) thread_id;
    if(position % 2 == 0)
    {
        bigArray[position] = bigArray[position] * 2;
        printf("Thread1 %ld\n", position);
        countThread0 ++;
    }else
    {
        bigArray[position] = bigArray[position] * 2;
        printf("Thread2 %ld\n", position);
        countThread1 ++;
    }

    pthread_exit(NULL);    
}

int main()
{
  pthread_t thread1,thread2;  

  for(int i = 0; i < arrayLimit; i++)
  {
    bigArray[i] = i;
  }

  //thread 1  
  for (long i = 0; i < arrayLimit; i += 2) {
    pthread_create(&thread1, NULL, doubleNumbers , (void *) i);
  }
  //thread 2  
  for (long i = 1; i < arrayLimit; i += 2) {
    pthread_create(&thread2, NULL, doubleNumbers , (void *) i);
  }  
  
  pthread_join(thread1, NULL);
  pthread_join(thread2, NULL);

  printf("\n");
  printf("\n"); 

  for(int i = 0; i < arrayLimit; i++)
  {
    //printf("For position %d has its value %ld \n", i, bigArray[i]);
    countTotalArrayElements++; 
  }

  printf("\n");
  printf("CountThread1 %d \n", countThread0);
  printf("CountThread2 %d \n", countThread1);  
  printf("\n");

  printf("CountTotalElements %d", countTotalArrayElements);
  printf("\n");
  printf("\n");

  return 0;
}